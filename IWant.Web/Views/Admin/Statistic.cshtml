@model StatisticViewModel
@{
    ViewData["Title"] = "Statistic";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";

    var blogCount = Model.TotalBlog;
    var accountCount = Model.TotalAccount;
    var rateCount = Model.TotalRate;
    var commentCount = Model.TotalComment;

    var newestBlog = Model.NewestBlog;

    var mostWatchBlog = Model.MostWatchBlog;

    var games = Model.Games;

    var activeUsers = Model.ActiveUsers;
    //Bar Chart
    var blogCountByMonth = Model.BlogCountByMonth;
    var userCountByMonth = Model.UserCountByMonth;
    var commentCountByMonth = Model.CommentCountByMonth;
    //Line Chart
    var blogLineChart = Model.BlogLineChart;
    var commentLineChart = Model.CommentLineChart;
    var rateLineChart = Model.RateLineChart;
    var totalLineChart = Model.TotalLineChart;
    //Leaderboard
    var FruitDropList = Model.FruitDropLists.Take(5);
    var DotConnectionList = Model.DotConnectionLists.Take(5);
    var EmotionSelectionList = Model.EmotionSelectionLists.Take(5);

    var CountUserFruitDrop = FruitDropList.Count();
    var CountUserDotConnection = DotConnectionList.Count();
    var CountUserEmotionSelection = EmotionSelectionList.Count();

    var TotalUserPlayGame = CountUserFruitDrop + CountUserDotConnection + CountUserEmotionSelection;
}

<head>
    <style>
        .card-custom {
        background: #fff;
        border: none;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        text-align: left;
        }

        .card-custom1 {
        background: #fff;
        border: none;
        border-radius: 10px;
        padding: 20px;
        height: 290px;
        width: 100%;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        text-align: left;
        }

        .chart-wrapper {
        display: block;
        box-sizing: border-box;
        height: 230px;
        }

        .card-title {
        font-size: 0.9rem;
        font-weight: bold;
        color: #6b7280;
        text-transform: uppercase;
        }

        .card-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #111827;
        }

        .card-subtext {
        font-size: 0.9rem;
        color: #10b981;
        font-weight: 500;
        display: flex;
        align-items: center;
        }

        .card-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(to bottom right, #ff7e5f, #feb47b);
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .card-icon i {
        font-size: 24px;
        color: white;
        }




        .recent-orders table thead th {
        text-transform: uppercase;
        font-size: 0.8rem;
        color: #6b7280;
        }

        .recent-orders table tbody tr td {
        vertical-align: middle;
        }

        .top-selling-products img {
        width: 60px;
        margin-right: 10px;
        border-radius: 8px;
        }

        .top-selling-products .product-item {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        }

        .top-selling-products .product-item h6 {
        font-size: 0.95rem;
        margin: 0;
        }

        .top-selling-products .product-item span {
        font-size: 0.85rem;
        color: #6b7280;
        }


        .campaign-container,
        .chart-container {
        height: 550px;
        padding: 20px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        }

        .campaign-container {
        justify-content: space-between;
        }

        .chart-container {
        justify-content: flex-start;
        align-items: center;
        }

        .chart-container h5 {
        margin-bottom: 20px;
        font-size: 1.25rem;
        color: #333;
        }

        .chart-container canvas {
        width: 100%;
        max-height: 450px;
        }


        .chart-container,
        .campaign-container {
        height: 550px;
        padding: 20px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

        .combined-container {
        height: 450px;
        display: flex;
        flex-direction: column;
        gap: 20px;
        }

        .combined-container > .chart-container,
        .combined-container > .campaign-container {
        flex: 1;
        padding: 20px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

        .info-card {
        height: 300px !important;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 300px;
        }

        .card-header-area {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
        }

        .card-header-area h6 {
        margin: 0;
        font-weight: 600;
        color: #333;
        }

        .card-subtext {
        margin-top: 5px;
        font-size: 1.1rem;
        font-weight: 500;
        color: #555;
        }

        .card-subtext small {
        font-size: 0.85rem;
        }

        .chart-wrapper {
        flex: 1; /* chart takes the remaining vertical space */
        display: flex;
        align-items: center;
        justify-content: center;
        }

        .legend-row .badge {
        font-size: 0.8rem;
        }

        .blog, .fruitdrop-score, .dotconnection-score, .emotionselection-score {
        width: 100%;
        padding: 20px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

        .blog nav, .fruitdrop-score nav, .dotconnection-score nav, .emotionselection-score nav, game nav {
        bottom: 0;
        right: 20px;
        }

        .row.mt-4.container.custom {
        margin: auto;
        }

        .avt img {
        width: 70px;
        height: 50px;
        }

        .text-comment {
        margin-left: 20px;
        }

    </style>
</head>

<body>

    <div class="container">
        <h1 class="mb-3" style="text-align:center; font-weight: bold">STATISTIC</h1>
        <div class="row g-3">
            <div class="col-md-3">
                <div class="card-custom d-flex justify-content-between align-items-center">
                    <div>
                        <div class="card-title">Blog</div>
                        <div class="card-value">@blogCount</div>
                    </div>
                    <div class="card-icon" style="background: linear-gradient(to bottom right, #FFD29D , #FF6700 );">
                        <i class="fa-solid fa-blog"></i>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card-custom d-flex justify-content-between align-items-center">
                    <div>
                        <div class="card-title">User</div>
                        <div class="card-value">@accountCount</div>
                    </div>
                    <div class="card-icon" style="background: linear-gradient(to bottom right, #A8FFC5, #00A63D );">
                        <i class="fa-solid fa-user"></i>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card-custom d-flex justify-content-between align-items-center">
                    <div>
                        <div class="card-title">Feedback</div>
                        <div class="card-value">@commentCount</div>
                    </div>
                    <div class="card-icon" style="background: linear-gradient(to bottom right, #B8E0FF, #1E5EFF );">
                        <i class="fa-regular fa-comments"></i>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card-custom d-flex justify-content-between align-items-center">
                    <div>
                        <div class="card-title">Rate</div>
                        <div class="card-value">@rateCount</div>
                    </div>
                    <div class="card-icon" style="background: linear-gradient(to bottom right, #FFC7C7 , #E10000  );">
                        <i class="fa-regular fa-star"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div style="margin: auto 0" class="col-md-8">
                <div class="chart-container">
                    <h5>Statistic System In @DateTime.Now.Year</h5>
                    <canvas id="salesChart" style="height:450px;"></canvas>
                </div>
            </div>
            <div class="col-md-4 d-flex flex-column gap-3">

                <div class="info-card p-3">
                    <div class="card-header-area">
                        <h6>Game Access Statistics</h6>
                        <div class="card-subtext">
                        </div>
                    </div>
                    <div class="chart-wrapper">
                        <canvas id="trafficChart"></canvas>
                    </div>
                </div>

                <div class="top-selling-products">
                    <div style="height:90%" class="card-custom1 mt-3">
                        <h5>The Newest Blogs</h5>
                        @if (newestBlog.Count() != 0)
                        {
                            foreach (var blog in newestBlog)
                            {
                                <div class="product-item position-relative">
                                    <a asp-action="BlogDetail" asp-controller="Blog" asp-route-id="@blog.Id" class="stretched-link"></a>
                                    <img src="@blog.ImageUrl" alt="Newest Blog" />
                                    <div class="d-flex justify-content-between">
                                        <h6 style="font-size:12px">@blog.Title</h6>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>



        <!-- Bảng Blog được yêu thích nhất và phân trang JS -->
        <div class="row mt-4 container custom">
            <h2 style="text-align:center" class="mb-3">Most watched</h2>
            <div class="col-md-12">
                <div class="blog position-relative">
                    <table class="table align-middle mt-3 table-striped">
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Author</th>
                                <th>Title blog</th>
                                <th>Watched</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (mostWatchBlog.Count() != 0)
                            {
                                int i = 1;
                                foreach (var blog in mostWatchBlog)
                                {
                                    <tr style="height:65px">
                                        <td width="5%">@i</td>
                                        <td width="15%">@blog.User.FullName</td>
                                        <td width="70%">@blog.Title</td>
                                        <td width="10%" style="text-align:center">@blog.ViewCount</td>
                                    </tr>
                                    i++;
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- The most score for game-->
        <div class="row mt-4 container custom">
            <h2 style="text-align:center" class="mb-3">Leader Board</h2>

            @{
                var leaderboards = new List<(string Title, List<LeaderboardViewModel> DataList, string TableAttr)>
            {
            ("Fruit Drop Score", FruitDropList.ToList(), "fruitdrop"),
            ("Dot Connection Score", DotConnectionList.ToList(), "dotconnection"),
            ("Emotion Selection Score", EmotionSelectionList.ToList(), "emotionselection")
            };
            }

            @foreach (var leaderboard in leaderboards)
            {
                <div class="col-md-4">
                    <div class="@($"{leaderboard.TableAttr}-score") position-relative">
                        <h5>@leaderboard.Title</h5>
                        <table class="table align-middle mt-3 table-striped" data-table="@leaderboard.TableAttr">
                            <thead>
                                <tr>
                                    <th width="5%">No</th>
                                    <th width="90%">Full Name</th>
                                    <th width="5%">Score</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < 5; i++)
                                {
                                    if (i < leaderboard.DataList.Count)
                                    {
                                        var user = leaderboard.DataList[i];
                                        <tr style="height:65px">
                                            <td>@(i + 1)</td>
                                            <td>@user.User.FullName</td>
                                            <td>@user.Score</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr style="height:65px">
                                            <td>@(i + 1)</td>
                                            <td>-</td>
                                            <td>0</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <nav class="position-absolute">
                            <ul class="pagination" data-pagination="@leaderboard.TableAttr"></ul>
                        </nav>
                    </div>
                </div>
            }
        </div>



        <div class="container mt-4">
            <div class="row mt-4">
                <div style="margin:auto 0" class="col-md-8">
                    <div class="chart-container">
                        <h5>System Statistics in 30 Days</h5>
                        <canvas id="lineChart" style="height:450px;"></canvas>
                    </div>
                </div>
                <div class="col-md-4 d-flex flex-column gap-3">

                    <div style="height: 260px !important" class="info-card p-3">
                        <div class="card-header-area">
                            <h6>Active Users</h6>
                            <div class="card-subtext"></div>
                            @if (activeUsers.Count() != 0)
                            {
                                foreach (var user in activeUsers)
                                {
                                    <div class="avt mt-3 d-flex align-items-center">
                                        <img style="border-radius:10px; width:50px; height:50px; border-radius: 50%; object-fit:cover" src="@user.ImageUrl" alt="Avatar" />
                                        <div class="text-comment flex-grow-1">
                                            <h6 class="mb-1 ">@user.FullName</h6>
                                            <div class="d-flex justify-content-between">
                                                <h6 class="mb-0 text-warning">Blog: @user.Blogs.Count()</h6>
                                                <h6 class="mb-0 text-success">Feedback: @user.Feedbacks.Count()</h6>
                                                <h6 class="mb-0 text-danger">Rate: @user.Rates.Count()</h6>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <div class="top-selling-products">
                        <div style="height: 360px" class="card-custom1 mt-3 position-relative game">
                            <h5>Games</h5>
                            <table class="table align-middle mt-3" data-table="game">
                                @if (games.Count() != 0)
                                {
                                    foreach (var game in games)
                                    {
                                        <tr style="height:65px">
                                            <td><img src="/images/@(game.Name).png" alt="Game Image" /></td>
                                            <td width="100%">@(game.Name == "Tower Build" ? $"{game.Name} (Coming soon)" : game.Name)</td>
                                        </tr>
                                    }
                                }
                            </table>
                            <nav style="right:20px" class="position-absolute">
                                <ul class="pagination" data-pagination="game"></ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            const ctx1 = document.getElementById('salesChart').getContext('2d');
            //Bar Chart
            const blogCountByMonthData = @Html.Raw(Json.Serialize(blogCountByMonth));
            const userCountByMonthData = @Html.Raw(Json.Serialize(userCountByMonth));
            const commentCountByMonthData = @Html.Raw(Json.Serialize(commentCountByMonth));
            //Line Chart
            const blogLineChartData = @Html.Raw(Json.Serialize(blogLineChart));
            const commentLineChartData = @Html.Raw(Json.Serialize(commentLineChart));
            const rateLineChartData = @Html.Raw(Json.Serialize(rateLineChart));
            const totalLineChartData = @Html.Raw(Json.Serialize(totalLineChart));
            //Temp Data for Line Chart
            const array1 = [53, 49, 53, 48, 54, 59, 43, 56, 44, 51, 57, 52, 41, 44, 52, 49, 50, 48, 50, 58, 55, 58, 47, 44, 50, 47, 54, 46, 45, 55];
            const array2 = [33, 43, 36, 47, 32, 36, 49, 46, 49, 30, 40, 33, 48, 30, 30, 49, 48, 42, 38, 47, 40, 41, 46, 48, 44, 42, 35, 36, 49, 42];
            const array3 = [22, 39, 22, 23, 27, 32, 20, 32, 34, 34, 33, 30, 21, 30, 31, 38, 34, 36, 20, 31, 24, 36, 35, 28, 38, 28, 33, 34, 20, 38];
            const array4 = [108, 131, 111, 118, 113, 127, 112, 134, 127, 115, 130, 115, 110, 104, 113, 136, 132, 126, 108, 136, 119, 135, 128, 120, 132, 117, 122, 116, 114, 135];

            //Pie Chart
            const FruitDropData = @Html.Raw(Json.Serialize(CountUserFruitDrop));
            const DotConnectionData = @Html.Raw(Json.Serialize(CountUserDotConnection));
            const EmotionSelectionData = @Html.Raw(Json.Serialize(CountUserEmotionSelection));

            new Chart(ctx1, {
                type: 'bar',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug','Sep','Oct','Nov','Dec'],
                    datasets: [{
                        label: 'Blog',
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        data: blogCountByMonthData
                    }, {
                        label: 'Account',
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        data: userCountByMonthData
                    }, {
                        label: 'Feedback',
                        backgroundColor: 'rgba(75, 192, 192, 0.5)',
                        data: commentCountByMonthData
                    }]
                }
            });

            var ctxTraffic = document.getElementById('trafficChart').getContext('2d');
            var trafficChart = new Chart(ctxTraffic, {
                type: 'pie',
                data: {
                    labels: ["Fruit Drop", "Dot Connection", "Emotion Selection"],
                    datasets: [{
                        data: [FruitDropData, DotConnectionData, EmotionSelectionData],
                        backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56"]
                    }]
                }
            });

            // Lấy danh sách 30 ngày gần nhất
            function getLast30Days() {
                const result = [];
                const today = new Date();
                for (let i = 29; i >= 0; i--) {
                    let date = new Date();
                    date.setDate(today.getDate() - i);
                    result.push(`${date.getDate()}/${date.getMonth() + 1}`);
                }
                return result;
            }

            const ctx3 = document.getElementById('lineChart').getContext('2d');
            new Chart(ctx3, {
                type: 'line',
                data: {
                    labels: getLast30Days(),
                    datasets: [
                        {
                            label: 'Blog',
                            borderColor: '#ff6384',
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            data: blogLineChartData,
                            fill: true
                        },
                        {
                            label: 'Feedback',
                            borderColor: '#36a2eb',
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            data: commentLineChartData,
                            fill: true
                        },
                        {
                            label: 'Rate',
                            borderColor: '#4bc0c0',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            data: rateLineChartData,
                            fill: true
                        },
                        {
                            label: 'Total',
                            borderColor: '#ff9f40',
                            backgroundColor: 'rgba(255, 159, 64, 0.2)',
                            data: totalLineChartData,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            ticks: {
                                maxRotation: 45,
                                minRotation: 45
                            }
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });





            document.addEventListener("DOMContentLoaded", function () {
                const rowsPerPage = 3;

                function setupPagination(tableSelector, paginationSelector) {
                    const tableBody = document.querySelector(`table[data-table="${tableSelector}"] tbody`);
                    const rows = Array.from(tableBody.querySelectorAll("tr"));
                    const totalRows = rows.length;
                    const totalPages = Math.ceil(totalRows / rowsPerPage);
                    const paginationContainer = document.querySelector(`ul[data-pagination="${paginationSelector}"]`);

                    function displayRows(page) {
                        rows.forEach((row) => (row.style.display = "none"));
                        const start = (page - 1) * rowsPerPage;
                        rows.slice(start, start + rowsPerPage).forEach((row) => (row.style.display = ""));
                    }

                    function renderPagination() {
                        paginationContainer.innerHTML = "";
                        for (let i = 1; i <= totalPages; i++) {
                            const li = document.createElement("li");
                            li.classList.add("page-item");
                            if (i === 1) li.classList.add("active");
                            const a = document.createElement("a");
                            a.classList.add("page-link");
                            a.href = "#";
                            a.textContent = i;
                            a.addEventListener("click", function (e) {
                                e.preventDefault();
                                paginationContainer.querySelectorAll(".page-item").forEach((item) => item.classList.remove("active"));
                                li.classList.add("active");
                                displayRows(i);
                            });
                            li.appendChild(a);
                            paginationContainer.appendChild(li);
                        }
                    }

                    renderPagination();
                    displayRows(1);
                }
                setupPagination("game", "game");
            });
        </script>

    }
</body>


