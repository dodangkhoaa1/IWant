@using IWant.DataAccess
@model BlogViewModel;


@{
    ViewData["Title"] = "BlogDetail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<head>
    <style>
        body {
            background-color: #FFFFFF;
            color: #000;
        }

        .blog-container {
            margin: auto;
            padding: 20px;
            background: #FFFFFF;
            border-radius: 8px;
        }

        .blog-title {
            font-size: 3rem;
            font-weight: bold;
            text-align: center;
            color: gray;
            position: relative;
            margin-bottom: 20px;
        }

            .blog-title::after {
                content: "";
                position: absolute;
                bottom: -5px;
                left: 50%;
                width: 80px;
                height: 2px;
                background-color: gray;
                transform: translateX(-50%);
            }

        .blog-meta {
            font-size: 0.9rem;
            color: gray;
            text-align: right;
        }

        .rating-blog {
            text-align: right;
            margin-bottom: 10px;
        }

        .rating {
            text-align: right;
            margin-bottom: 10px;
        }

        .star {
            font-size: 24px;
            cursor: pointer;
            color: #ccc;
            transition: color 0.3s;
        }

            .star.active,
            .star:hover {
                color: gold;
            }

        .author-section {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .author-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 10px;
        }

        .author-name {
            font-weight: bold;
        }

        .rating-blog i {
            color: gold;
        }
        /* Slider */
        .related-container {
            position: relative;
            max-width: 100%;
            overflow: hidden;
            padding: 0; /* loại bỏ padding để slider chiếm toàn bộ chiều rộng */
        }

        .related-posts {
            display: flex;
            transition: transform 0.5s ease-in-out;
        }

        .post {
            flex: 0 0 100%;
            background: #f9f9f9;
            padding: 20px; /* dùng padding đồng đều */
            border-radius: 5px;
            box-sizing: border-box;
            margin: 0; /* không có margin giữa các slide */
            width: 100%;
        }
        /* Layout của card: 2 cột (sử dụng flexbox) */
        .post-content {
            display: flex;
            flex-wrap: wrap;
        }

            .post-content .image-col,
            .post-content .text-col {
                flex: 1 1 50%;
                padding: 10px;
            }

                .post-content .image-col img {
                    width: 100%;
                    height: auto;
                    border-radius: 5px;
                }

        .slider-dots {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 10px;
        }

            .slider-dots .dot {
                width: 10px;
                height: 10px;
                border-radius: 50%;
                background: #ccc;
                cursor: pointer;
            }

                .slider-dots .dot.active {
                    background: #FEDA15;
                }
        /* Content styles ngoài slider */
        .content-wrapper {
            text-align: center;
            margin-top: 20px;
        }

        .article-image {
            max-width: 100%;
            height: 60vh;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .article-text {
            font-size: 1.1rem;
            line-height: 1.6;
            margin-top: 15px;
            color: #333;
            text-align: justify;
            padding: 0 10px;
        }

        .comment {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .comment-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 10px;
        }
    </style>
</head>

<body>
    <div class="container p-4 blog-container">
        <p class="blog-meta">⏰ @Model.CreatedAt.ToString("dd/MM/yyyy - HH:mm")</p>

        <h1 class="blog-title">@Model.Title</h1>

        <div class="rating-blog">
            @for (int i = 1; i <= 5; i++)
            {
                if (i <= Model.AverageRating)
                {
                    <i class="fa-solid fa-star"></i>
                }
                else
                {
                    <i class="fa-regular fa-star"></i>
                }
            }
            <span style="font-weight: bold; color: gray;">@Model.AverageRating / 5</span>
            <p>@Model.CountRate</p>
        </div>
        

        <div class="author-section">
            <img src="@Model.User.ImageUrl" alt="Author Avatar" class="author-avatar">
            <span class="author-name">@Model.User.FullName</span>
        </div>
        <div class="content-wrapper">
            <img src="@Model.ImageUrl" alt="Article Illustration" class="img-fluid article-image">
            <p class="article-text">
                @Html.Raw(Model.Content)
            </p>
        </div>
        <h4 class="mt-4">Related Posts</h4>
        <div class="related-container">
            <div class="related-posts">
                <!-- Post 1 -->
                <div class="post">
                    <div class="post-content">
                        <div class="image-col">
                            <img src="~/images/banner.jpg" alt="Post 1">
                        </div>
                        <div class="text-col">
                            <h5>Title 1</h5>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                        </div>
                    </div>
                </div>
                <!-- Post 2 -->
                <div class="post">
                    <div class="post-content">
                        <div class="image-col">
                            <img src="~/images/banner.jpg" alt="Post 2">
                        </div>
                        <div class="text-col">
                            <h5>Title 2</h5>
                            <p>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
                        </div>
                    </div>
                </div>
                <!-- Post 3 -->
                <div class="post">
                    <div class="post-content">
                        <div class="image-col">
                            <img src="~/images/banner.jpg" alt="Post 3">
                        </div>
                        <div class="text-col">
                            <h5>Title 3</h5>
                            <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.</p>
                        </div>
                    </div>
                </div>
                <!-- Post 4 -->
                <div class="post">
                    <div class="post-content">
                        <div class="image-col">
                            <img src="~/images/banner.jpg" alt="Post 4">
                        </div>
                        <div class="text-col">
                            <h5>Title 4</h5>
                            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse.</p>
                        </div>
                    </div>
                </div>
                <!-- Thêm bài viết khác nếu cần -->
            </div>
            <div class="slider-dots"></div>
        </div>
        <h4 class="mt-4">Comments</h4>
        @{
            if (Model.Comments.Count == 0)
            {
                <p style="color: gray; font-style: italic;">No Comment in this blog!</p>
            }
            else
            {
                foreach (var comment in Model.Comments)
                {
                    <div style="display: flex; align-items: center; padding: 10px; border-bottom: 1px solid #ddd;">
                        <img src="@comment.User.ImageUrl" alt="Avatar"
                             style="width: 40px; height: 40px; border-radius: 50%; margin-right: 10px;object-fit:cover">
                        <div>
                            <strong style="color: #007bff;">@comment.User.FullName</strong>
                            <p style="margin: 5px 0; color: #333;">@comment.Content</p>
                        </div>
                    </div>
                }
            }
        }

        @if (User.Identity.IsAuthenticated)
        {
            <form asp-action="RatingBlog" asp-controller="Comment" method="post">
                <input type="hidden" name="BlogId" value="@Model.Id" />
                <div class="rating">
                    <span class="star" data-value="1">&#9733;</span>
                    <span class="star" data-value="2">&#9733;</span>
                    <span class="star" data-value="3">&#9733;</span>
                    <span class="star" data-value="4">&#9733;</span>
                    <span class="star" data-value="5">&#9733;</span>
                    <input type="hidden" id="ratingValue" name="Rating" value="@Model.UserRating">
                </div>
            </form>

            <form asp-action="CreateComment" asp-controller="Comment" method="post"
                  style="margin-top: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; background: #f9f9f9;">
                <input type="hidden" name="BlogId" value="@Model.Id" />

                <div style="margin-bottom: 10px;">
                    <label style="font-weight: bold;">Comment Blog</label>
                    <input type="text" name="Content" class="form-control" required
                           style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">
                </div>

                <button type="submit"
                        style="background: #007bff; color: white; padding: 8px 15px; border: none; border-radius: 4px; cursor: pointer;">
                    Send
                </button>
            </form>
        }
        else
        {
            <p style="color: red; font-weight: bold;">Sign in to comment</p>
        }

    </div>

    <script>
        let currentIndex = 0;
        const postContainer = document.querySelector(".related-posts");
        const totalPosts = document.querySelectorAll(".post").length;

        function updateSlider() {
            const containerWidth = document.querySelector('.related-container').clientWidth;
            postContainer.style.transform = `translateX(-${currentIndex * containerWidth}px)`;
            updateDots();
        }

        function updateDots() {
            const dots = document.querySelectorAll('.slider-dots .dot');
            dots.forEach((dot, index) => {
                dot.classList.toggle('active', index === currentIndex);
            });
        }

        function createDots() {
            const sliderDotsContainer = document.querySelector('.slider-dots');
            for (let i = 0; i < totalPosts; i++) {
                const dot = document.createElement('div');
                dot.classList.add('dot');
                if (i === 0) dot.classList.add('active');
                dot.addEventListener('click', () => {
                    currentIndex = i;
                    updateSlider();
                });
                sliderDotsContainer.appendChild(dot);
            }
        }

        function autoSlide() {
            currentIndex = (currentIndex + 1) % totalPosts;
            updateSlider();
        }

        window.addEventListener("resize", updateSlider);
        createDots();
        updateSlider();
        setInterval(autoSlide, 5000);
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const stars = document.querySelectorAll(".star");
            const ratingValue = document.getElementById("ratingValue");
            let selectedRating = parseInt(ratingValue.value);

            function highlightStars(value) {
                stars.forEach(s => s.classList.remove("active"));
                for (let i = 0; i < value; i++) {
                    stars[i].classList.add("active");
                }
            }
            highlightStars(selectedRating);

            stars.forEach(star => {
                star.addEventListener("click", function () {
                    selectedRating = parseInt(this.getAttribute("data-value"));
                    ratingValue.value = selectedRating;
                    highlightStars(selectedRating);
                    submitRating(selectedRating);
                });

                star.addEventListener("mouseover", function () {
                    highlightStars(parseInt(this.getAttribute("data-value")));
                });

                star.addEventListener("mouseout", function () {
                    highlightStars(selectedRating);
                });
            });

            function submitRating(value) {
                const blogId = document.querySelector("input[name='BlogId']").value;

                fetch("/Comment/RatingBlog", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: `BlogId=${blogId}&Rating=${value}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Rating submitted successfully!");
                    } else {
                        alert("Error submitting rating.");
                    }
                })
                .catch(error => console.error("Error:", error));
            }
        });
    </script>

    <script>
                document.addEventListener("DOMContentLoaded", function () {
            const averageRating = parseInt("@Model.AverageRating"); // Lấy số sao trung bình từ Razor
            const ratingContainer = document.getElementById("averageRating");
            const ratingText = document.getElementById("averageRatingText");

            ratingContainer.innerHTML = ""; // Xóa nội dung cũ

            for (let i = 1; i <= 5; i++) {
                const star = document.createElement("i");
                star.classList.add("fa-star", "fa-solid"); // Mặc định là sao sáng
                if (i > averageRating) {
                    star.classList.replace("fa-solid", "fa-regular"); // Nếu lớn hơn thì thành sao rỗng
                }
                ratingContainer.appendChild(star);
            }

            ratingText.textContent = `${averageRating} / 5`; // Cập nhật lại số sao
        });

        });
    </script>

</body>