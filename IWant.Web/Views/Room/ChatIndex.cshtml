@using IWant.BusinessObject.Enitities
@using IWant.DataAccess
@model ChatRoom

@{
    ViewData["Title"] = "Supporting Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var roomName = User.Identity.Name;
    var roleMember = "Admin";
    if (User.IsInRole("Member"))
    {
        roleMember = "Member";
    }
    <link rel="stylesheet" href="~/css/main.css" />
    <link rel="stylesheet" href="~/css/reponsive.css" />
    <link rel="stylesheet" href="~/css/site.css" />

    bool roomIsExist = false;
    if(Model != null){
        roomIsExist = true;
    }
}

<style>
    .app {
        display: flex;
        background-color: #f8f9fa;
    }

    .sidebar .header i {
        color: #000000;
        font-size: 14px;
    }

    .sidebar {
        background-color: #FFFFFF;
        display: flex;
        flex-direction: column;
        position: relative;
        border-right: 2px solid #ccc;
        width:20vw;
    }

    .main-content .chat-input .actions i {
        margin: auto 0;
        padding: 0 5px;
        color: #E89073;
        cursor: pointer;
    }

        .main-content .chat-input .actions i:hover {
            margin: auto 0;
            padding: 0 5px;
            color: #F8A90D;
            cursor: pointer;
        }

    .sidebar .header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        background-color: #E89073;
        border-bottom: 1px solid #ccc;
    }

        .sidebar .header h5 {
            margin: 0;
            font-size: 1.2rem;
            color: #000;
        }

    .main-content .header h4 {
        margin: 0;
        font-size: 1.2rem;
        color: #000;
        font-weight: 600;
    }

    .sidebar .header a {
        color: #000;
        text-decoration: none;
        font-size: 1.2rem;
    }

    .main-content .chat-input input {
        width: 100%;
        border: none;
        border-radius: 0;
        border-top: 1px solid #eee;
        background: #f2f2f2;
        margin-top: auto;
        text-indent: 10px;
    }

    .sidebar .rooms {
        margin: 0;
        padding: 0;
        list-style: none;
        flex: 1;
        overflow-y: auto;
    }

        .sidebar .rooms li a {
            display: block;
            padding: 0.75rem 1rem;
            color: #000;
            font-weight: 600;
            text-decoration: none;
            border-bottom: 1px solid #e2e2e2;
        }

            .sidebar .rooms li a:hover,
            .sidebar .rooms li a.active {
                background-color: #F0F8FF;
                color: #000;
                font-weight: 600;
            }

    .sidebar .profile {
        border-top: 1px solid #ccc;
        background-color: #FFFFFF;
    }

        .sidebar .profile img.user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 0.5rem;
        }

        .sidebar .profile .role {
            margin: 0;
            font-size: 0.9rem;
            color: #333;
        }

        .sidebar .profile div a {
            font-size: 14px;
            color: #000000;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }

            .sidebar .profile div a:hover {
                color: black;
            }

    .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        background-color: #fff;
    }

        .main-content .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-bottom: 1px solid #ccc;
            background-color: transparent;
        }

            .main-content .header h5 {
                margin: 0;
                color: #000;
                font-weight: 600;
            }

    .room-actions button {
        border: none;
        background: transparent;
        cursor: pointer;
    }

    .chat-body {
        flex: 1;
        padding: 1rem;
        overflow-y: auto;
    }

    .chat-message {
        margin-bottom: 1rem;
    }

        .chat-message.isother .message-content {
            background-color: #f1f1f1;
            border-radius: 10px 10px 10px 0;
            color: #333;
            margin-right: auto;
            margin-left: 0;
            max-width: 40%;
            min-width: 130px;
            padding: 0.3rem 0.7rem;
        }

        .chat-message.ismine .message-content {
            background-color: #E89073;
            border-radius: 10px 10px 0 10px;
            border: 1px solid #FEDA15;
            color: #000;
            margin-left: auto;
            margin-right: 0;
            max-width: 40%;
            min-width: 130px;
            font-size: 14px;
            padding: 0.3rem 0.7rem;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

    .message-wrapper {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .timestamp {
        font-size: 12px;
        color: gray;
        margin-bottom: 2px;
        align-self: flex-start;
    }

    .message-content {
        background-color: #007bff;
        color: white;
        padding: 8px 12px;
        border-radius: 15px;
        max-width: fit-content;
        word-wrap: break-word;
        align-self: flex-end;
    }

    .chat-message.isother {
        justify-content: flex-start;
    }
    .chat-message.ismine .timestamp{
        margin-right: 0;
        margin-left: auto;
    }

    .message-avatar {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 0.5rem;
    }

    .message-content .author {
        font-weight: bold;
        margin-right: 0.5rem;
    }

    .chat-input {
        display: flex;
        align-items: center;
        padding: 0.5rem 2rem;
        border-top: 1px solid #ccc;
    }

        .chat-input input[type="text"] {
            flex: 1;
            border: 1px solid #ccc;
            border-radius: 20px;
            outline: none;
            height: 100%;
        }

        .chat-input .actions {
            display: flex;
            align-items: center;
            margin-left: 0.5rem;
        }

    .modal-footer .btn-primary {
        background-color: #FEDA15;
        border-color: #FEDA15;
        color: #000;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .modal-footer .btn-secondary {
        background-color: #e0e0e0;
        border-color: #e0e0e0;
        color: #000;
        border-radius: 4px;
    }

    .sidebar .header #create-room {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        height: 30px;
        background-color: #FFE4B5;
        color: #000;
        border-radius: 50%;
        text-decoration: none;
        transition: background-color 0.3s;
    }

        .sidebar .header #create-room i {
            font-size: 16px;
            line-height: 1; /* Đảm bảo icon không bị lệch */
            text-align: center;
            opacity: 1 !important;
            display: flex !important;
            visibility: visible !important;
            color: #000000;
        }



        .sidebar .header #create-room:hover {
            background-color: #EFA895;
        }

    .modal-footer .btn-danger {
        background-color: #f44336;
        border-color: #f44336;
        color: #fff;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .room-actions button {
        background-color: transparent;
        color: #000;
        border: none;
        font-size: 1.1rem;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        transition: background-color 0.2s, color 0.2s;
    }

    .chat-body {
        width: 100%;
        height: 400px;
        overflow-y: auto;
        overflow-x: hidden;
        white-space: normal;
        word-wrap: break-word;
    }

    .sidebar ul li a:before {
        content: none;
        margin-right: 2px;
    }

    .game-header {
        text-align: center;
        margin: 30px 0;
    }

        .game-header h1 {
            font-size: 3rem;
            font-weight: bold;
            margin-top: 40px;
        }

        .game-header p {
            font-size: 1rem;
            color: #364d59;
            position: relative;
        }



    .modal-content {
        margin-top: 100px; /* Dịch xuống */
        display: block; /* Nếu đang bị ẩn */
    }

    .game-header p::after {
        content: "";
        display: block;
        width: 50%;
        height: 1px;
        justify-content: center;
        background-color: #364d59;
        margin: 10px auto;
    }
</style>

<div class="alert alert-warning alert-dismissible d-none" id="errorAlert" role="alert">
    <span data-bind="text:serverInfoMessage"></span>
    <button type="button" class="close" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

<div class="container chat" style="min-height:600px;">
    <div class="game-header">
        <h1>SUPPORTING CHAT</h1>
        <p></p>
    </div>
    <input id="userId" type="hidden" value="" />
    <div class="app">
        <div class="sidebar">
            <div class="header">
                <h5>Chat Rooms</h5>
                @if (User.IsInRole("Member") && !roomIsExist)
                {
                    <a id="create-room" data-bs-toggle="modal" data-bs-target="#create-room-modal">
                        <i id="plus-icon" class="fas fa-plus"></i>
                    </a>
                }
            </div>
            <ul class="rooms list-unstyled" id="room-list" data-bind="foreach: chatRooms">
                <li>
                    <a data-bind="text: $data.name, attr: { 'data-roomId': $data.id }, click: $parent.joinRoom.bind($data), css: { active: $root.joinedRoom() == $data.name()}"></a>
                </li>
            </ul>
            <div class="profile">
                <div>
                    <img src="#" class="user-avatar" data-bind="attr: { src:  myAvatar() }" />
                    <a class="myName" data-bind="html: myName() + '&nbsp;'"></a>
                    <p class="role"> (@roleMember)</p>
                </div>
            </div>
        </div>
        <div class="main-content" data-bind="visible: joinedRoom().length == 0">
            <span class="m-auto">Supporting Chat</span>
        </div>
        <div class="main-content" data-bind="visible: joinedRoom().length > 0">
            <div class="header">
                <h4 class="join" id="joinedRoom" data-bind="text: joinedRoom()">Lobby</h4>
                <div class="room-actions">
                    @if (User.IsInRole("Member"))
                    {
                        <button type="button" class="btn btn-link text-secondary px-1" data-bs-toggle="modal" data-bs-target="#remove-room-modal">
                            <i class="fa-solid fa-x"></i>
                        </button>
                    }
                </div>
            </div>
            <div class="chat-body">
                <ul class="list-unstyled" data-bind="foreach: chatMessages">
                    <li>
                        <div class="chat-message d-flex" data-bind="css: $data.isMine() === true ? 'ismine' : 'isother'">
                            <div class="left-side d-flex">
                                <img style="max-width: 100px;" class="message-avatar" data-bind="attr: { src:  $data.avatar() }" />
                            </div>
                            <div class="message-wrapper">
                                <span class="timestamp">
                                    <i class="fa-regular fa-clock"></i>
                                    <span data-bind="text: $data.timestamp"></span>
                                </span>
                                <div class="message-content d-flex flex-column">
                                    <span class="content" data-bind="html: $data.content"></span>
                                </div>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
            <div class="chat-input">
                <input id="chat-message" type="text" value="" data-bind="value: message, valueUpdate: 'afterkeydown', event: { keypress: onEnter}" placeholder="" />
                <div class="actions d-flex align-content-center">
                    <form method="post" asp-action="Upload" asp-controller="Upload" enctype="multipart/form-data" id="uploadForm">
                        <label for="UploadedFile" class="custom-file-upload">
                            <i class="fa-regular fa-image"></i>
                        </label>
                        <input type="hidden" name="RoomId" data-bind="value: joinedRoomId()" />
                        <input type="file" id="UploadedFile" name="File" accept=".jpg,.jpeg,.png" data-bind="event: {change: uploadFiles}" />
                    </form>
                    <i class="fa-regular fa-paper-plane" id="btn-send-message" data-bind="click: sendNewMessage"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="create-room-modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Room</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Create Chat Room To Chat With Admin!</p>
                <input id="roomName" type="hidden" value="@roomName" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" data-bind="click: createRoom">Create</button>
            </div>
        </div>
    </div>
</div>

@* <div class="modal" id="rename-room-modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rename Room</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" id="newRoomName" data-bind="value: $root.joinedRoom()" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" data-bind="click: editRoom">Update</button>
            </div>
        </div>
    </div>
</div> *@

<div class="modal" id="remove-room-modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Room</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this Chat Room?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" data-bind="click: deleteRoom">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/lib/knockoutjs/knockout-3.5.1.js"></script>
    <script src="~/js/site.js"></script>
    <script src="~/js/chat.js"></script>
}
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var chatInput = document.getElementById("chat-message");
        var sendIcon = document.getElementById("btn-send-message");

        // Kiểm tra ban đầu nếu ô input trống thì ẩn send icon
        if (chatInput.value.trim() === "") {
            sendIcon.disabled = true;
        }

        // Lắng nghe sự kiện thay đổi của ô input
        chatInput.addEventListener("input", function () {
            if (chatInput.value.trim().length > 0) {
                sendIcon.style.display = "inline-block"; // hiện nút gửi
            } else {
                sendIcon.disabled = true; // ẩn nút gửi
            }
        });
    });
</script>
