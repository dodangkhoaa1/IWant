// <auto-generated />
using System;
using IWant.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IWant.API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IWant.API.Data.Player", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("score")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            id = 1,
                            password = "admin",
                            score = 0,
                            username = "admin"
                        });
                });

            modelBuilder.Entity("IWant.API.Data.Word", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("imagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("textEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("textVi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("wordCategoryId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("wordCategoryId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            id = 1,
                            createdAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(2738),
                            imagePath = "",
                            status = true,
                            textEn = "I",
                            textVi = "Con",
                            updatedAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(2921),
                            wordCategoryId = 1
                        },
                        new
                        {
                            id = 2,
                            createdAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(3615),
                            imagePath = "",
                            status = true,
                            textEn = "Want To",
                            textVi = "Muốn",
                            updatedAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(3617)
                        },
                        new
                        {
                            id = 3,
                            createdAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(3621),
                            imagePath = "",
                            status = true,
                            textEn = "Eat",
                            textVi = "Ăn",
                            updatedAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(3621),
                            wordCategoryId = 2
                        },
                        new
                        {
                            id = 4,
                            createdAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(3623),
                            imagePath = "",
                            status = true,
                            textEn = "Drink",
                            textVi = "Uống",
                            updatedAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(3624),
                            wordCategoryId = 2
                        });
                });

            modelBuilder.Entity("IWant.API.Data.WordCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("imagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("nameEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("nameVi")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("WordCategories");

                    b.HasData(
                        new
                        {
                            id = 1,
                            createdAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(557),
                            imagePath = "",
                            nameEn = "Subject",
                            nameVi = "Chủ từ",
                            status = true,
                            updatedAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(783)
                        },
                        new
                        {
                            id = 2,
                            createdAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(1334),
                            imagePath = "",
                            nameEn = "Verb",
                            nameVi = "Động từ",
                            status = true,
                            updatedAt = new DateTime(2024, 12, 15, 14, 51, 38, 400, DateTimeKind.Local).AddTicks(1335)
                        });
                });

            modelBuilder.Entity("IWant.API.Data.Word", b =>
                {
                    b.HasOne("IWant.API.Data.WordCategory", "wordCategory")
                        .WithMany()
                        .HasForeignKey("wordCategoryId");

                    b.Navigation("wordCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
